<h1> About <%= @c_config[:app_name] %> </h1>

<p> Rest interaction is handled by a separate gem,
    which also provides collection,community, item, bitstream classes:
    see <a href="https://github.com/akinom/do-dspace-rest/tree/fake_it_for_ui">do-dspace-rest.git</a>
</p>
<p>
    The application has generic controllers and views in place wth mechanism
    to overwrite specific behaviours and views.
    Rendering is done via layouts that insert a view of the data produced in controllers into the content area of the active layout.
</p>

<h2> Layouts </h2>

<h3> Default Layout</h3>
<p>
    The <%= link_to "Default Layout", root_path %>
    functionally varies from the core in that is always wants to know the top communities, so it can put them on
    the navbar. It augments the application controllers do_always method as well as the
    CommunityControllers top method; In addition it wants to know the metadata of items when showing a collection.
    <br/>
    see
    <a href="https://github.com/akinom/dspace-rails/tree/master/app/controllers/concerns/default"> controller
        overwrites </a> and
    <a href='https://github.com/akinom/dspace-rails/blob/master/app/views/layouts/default.html.erb'> layout </a>
</p>

<h3> Sitemap Layout</h3>

<p> The
    <%= link_to "Sitemap Layout", :controller => :communities, :action => :top, :layout => 'sitemap' %> decides not to
    show top communities with titles that start with the letters M-Z. Collection pages show more thant the default 10
    items.
    <br/> see
    <a href="https://github.com/akinom/dspace-rails/tree/master/app/controllers/concerns/sitemap"> controller
        overwrites </a> and
    <a href='https://github.com/akinom/dspace-rails/blob/master/app/views/layouts/sitemap.html.erb'> layout </a>
</p>


<h3> Library Layout</h3>

<p>
    The
    <%= link_to "Library Layout", :controller => :communities, :action => :top, :layout => 'library' %> concentrates on
    building an item page that resembles other search results shown on an imaginary libraries system. It uses a different
    view renderer for item pages,

    <br/> see
    <a href='https://github.com/akinom/dspace-rails/blob/master/app/views/layouts/library.html.erb'> layout </a>
    and <a href='https://github.com/akinom/dspace-rails/blob/master/app/views/library/items/show.html.erb'>
    item show overwrite </a>
    replaces
    <a href="https://github.com/akinom/dspace-rails/blob/master/app/views/items/show.html.erb"> default item show</a>
</p>

<h3> CSS styling </h3>

<p>
    Changing the color scheme is a matter of referencing a different bootstrap theme in the layout files.
</p>

<p>
    Adding a logo, adding a link to the header section or whether to include bread crumbs on pages is done by
    modifying the main layout files.
</p>
<p>
    The <%= link_to "default Layout", root_path %> as well as the
    <%= link_to "Library Layout", :controller => :communities, :action => :top, :layout => 'library' %>

    add css classes to a pages main body area:
    <ul>
        <li>
            the controller name, eg 'application'
        </li>
        <li>
            the action name, eg 'show'
        </li>
        <li>
            the active layout, eg 'library'
        </li>
        <li>
            if available the handle of the displayed dspace object (item, collection, community)
            and the handles of its parents
        </li>

    </ul>

    On this page links are shown underlined, because of a custom rule in default.css.

    <br/>
    see
    <a href="https://github.com/akinom/dspace-rails/blob/master/app/assets/stylesheets/default.css"> default.css</a>
    and <a href="'https://github.com/akinom/dspace-rails/blob/master/app/helpers/application_helper.rb">
    application_helper.rb</a>

</p>

